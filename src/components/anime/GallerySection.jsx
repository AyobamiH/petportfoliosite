// /**
//  * This code was generated by Builder.io.
//  */
// import React, { useRef, useEffect } from "react";
// import { Canvas, useFrame } from "@react-three/fiber";
// import { useGLTF, OrbitControls } from "@react-three/drei";
// import { gsap } from "gsap";
// import { ScrollTrigger } from "gsap/ScrollTrigger";

// gsap.registerPlugin(ScrollTrigger);

// const AnimeFrame = ({ position, rotation, url }) => {
//   const { nodes, materials } = useGLTF("/models/anime-frame.glb");

//   useFrame((state) => {
//     const t = state.clock.getElapsedTime();
//     nodes.Frame.rotation.z = Math.sin(t / 1.5) / 20;
//     nodes.Frame.position.y = Math.sin(t / 1.5) / 10;
//   });

//   return (
//     <group position={position} rotation={rotation}>
//       <mesh geometry={nodes.Frame.geometry} material={materials.FrameMaterial}>
//         <meshBasicMaterial
//           attach="material"
//           map={useGLTF(url).nodes.Image.material.map}
//         />
//       </mesh>
//     </group>
//   );
// };

// const GallerySection = () => {
//   const sectionRef = useRef(null);

//   useEffect(() => {
//     const section = sectionRef.current;
//     gsap.fromTo(
//       section.querySelectorAll(".gallery-item"),
//       { opacity: 0, y: 50 },
//       {
//         opacity: 1,
//         y: 0,
//         stagger: 0.2,
//         duration: 1,
//         ease: "power3.out",
//         scrollTrigger: {
//           trigger: section,
//           start: "top 80%",
//           end: "bottom 20%",
//           toggleActions: "play none none reverse",
//         },
//       }
//     );
//   }, []);

//   return (
//     <section ref={sectionRef} className="py-16 bg-purple-50">
//       <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
//         <h2 className="text-3xl font-bold text-center text-purple-800 mb-12">
//           Our Anime Pet Gallery
//         </h2>
//         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
//           {[1, 2, 3, 4, 5, 6].map((index) => (
//             <div key={index} className="gallery-item">
//               <Canvas camera={{ position: [0, 0, 5] }}>
//                 <ambientLight intensity={0.5} />
//                 <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />
//                 <AnimeFrame
//                   position={[0, 0, 0]}
//                   rotation={[0, 0, 0]}
//                   url={`/images/anime-pet-${index}.jpg`}
//                 />
//                 <OrbitControls
//                   enableZoom={false}
//                   enablePan={false}
//                   enableRotate={false}
//                 />
//               </Canvas>
//             </div>
//           ))}
//         </div>
//       </div>
//     </section>
//   );
// };

// export default GallerySection;


// import React, { useRef, useEffect } from "react";
// import {Suspense } from "react";
// import { Canvas } from "@react-three/fiber";
// import { gsap } from "gsap";
// import { ScrollTrigger } from "gsap/ScrollTrigger";
// import AnimeFrame from "./AnimeFrame"; // Import AnimeFrame component
// import { OrbitControls } from "@react-three/drei"
// gsap.registerPlugin(ScrollTrigger);

// const GallerySection = () => {
//   const sectionRef = useRef(null);

//   // GSAP Scroll animation for gallery items
//   useEffect(() => {
//     const section = sectionRef.current;
//     gsap.fromTo(
//       section.querySelectorAll(".gallery-item"),
//       { opacity: 0, y: 50 },
//       {
//         opacity: 1,
//         y: 0,
//         stagger: 0.2,
//         duration: 1,
//         ease: "power3.out",
//         scrollTrigger: {
//           trigger: section,
//           start: "top 80%",
//           end: "bottom 20%",
//           toggleActions: "play none none reverse",
//         },
//       }
//     );
//   }, []);

//   return (
//     <section ref={sectionRef} className="py-16 bg-purple-50">
//       <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
//         <h2 className="text-3xl font-bold text-center text-purple-800 mb-12">
//           Our Anime Pet Gallery
//         </h2>
//         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
//           {[0, 1, 2].map((index) => (
//             <div key={index} className="gallery-item">
//               <Canvas camera={{ position: [0, 0, 5] }}>
//                 <ambientLight intensity={0.5} />
//                 <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />
//                 {/* <AnimeFrame
//                   position={[0, 0, 0]}
//                   rotation={[0, 0, 0]}
//                   url={`/images/anime-pet-${index}.jpg`} // Update the image source dynamically
//                 /> */}
//                 <Suspense fallback={<div>Loading...</div>}>
//                   <AnimeFrame
//                     position={[0, 0, 0]}
//                     rotation={[0, 0, 0]}
//                     url={`/images/anime-pet-${index}.jpg`}
//                   />
//                 </Suspense>
//                 <OrbitControls
//                   enableZoom={false}
//                   enablePan={false}
//                   enableRotate={false}
//                 />
//               </Canvas>
//             </div>
//           ))}
//         </div>
//       </div>
//     </section>
//   );
// };

// export default GallerySection;



import React, { useRef, useState, useEffect } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { useGLTF, OrbitControls } from '@react-three/drei';
import { TextureLoader } from 'three';
import { useLoader } from '@react-three/fiber';


const AnimeFrame = ({ position, rotation, url }) => {
  const { nodes, materials } = useGLTF("/models/anime-frame.glb");
  const texture = useLoader(TextureLoader, url);
  useEffect(() => {
    console.log("Nodes:", nodes);
    console.log("Materials:", materials);
  }, [nodes, materials]);
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    nodes.Frame.rotation.z = Math.sin(t / 1.5) / 20;
    nodes.Frame.position.y = Math.sin(t / 1.5) / 10;
  });

  return (
    <group position={position} rotation={rotation}>
      <mesh geometry={nodes.Frame.geometry} material={materials.FrameMaterial}>
        <meshBasicMaterial attach="material" map={texture} />
      </mesh>
    </group>
  );
};

const GallerySection = () => {
  const [key, setKey] = useState(0);
  const canvasRef = useRef(null);

  useEffect(() => {
    const canvas = canvasRef.current;

    const handleContextLost = (event) => {
      event.preventDefault();
      console.warn("WebGL context lost. Reinitializing...");
      setKey(prevKey => prevKey + 1); // Force re-rendering the Canvas
    };

    const handleContextRestored = () => {
      console.log("WebGL context restored.");
    };

    canvas.addEventListener('webglcontextlost', handleContextLost);
    canvas.addEventListener('webglcontextrestored', handleContextRestored);

    return () => {
      canvas.removeEventListener('webglcontextlost', handleContextLost);
      canvas.removeEventListener('webglcontextrestored', handleContextRestored);
    };
  }, []);

  return (
    <section className="py-16 bg-purple-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-3xl font-bold text-center text-purple-800 mb-12">
          Our Anime Pet Gallery
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {[0, 1, 2].map((index) => (
            <div key={index} className="gallery-item">
              <Canvas
                key={key} // Ensure re-render on context loss
                ref={canvasRef}
                camera={{ position: [0, 0, 5] }}
              >
                <ambientLight intensity={0.5} />
                <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />
                <AnimeFrame
                  position={[0, 0, 0]}
                  rotation={[0, 0, 0]}
                  url={`/images/anime-pet-${index}.png`}
                />
                <OrbitControls
                  enableZoom={false}
                  enablePan={false}
                  enableRotate={false}
                />
              </Canvas>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default GallerySection;
